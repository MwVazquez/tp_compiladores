package lyc.compiler;

import java_cup.runtime.*;

class Parser;

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal INT;
terminal CHAR;
terminal FLOAT;
terminal STRING;
terminal INIT;
terminal TWOPOINTS;
terminal P_COMA;
terminal COMA;
terminal LLAVEABRE;
terminal LLAVECIERRA;
terminal CICLO;
terminal AND;
terminal OR;
terminal NOT;
terminal MAYOR;
terminal MAYOR_IGUAL;
terminal MENOR;
terminal MENOR_IGUAL;
terminal DISTINTO;
terminal IGUAL;
terminal IF;
terminal ELSE;
terminal WRITE;
terminal CTE_CADENA;
terminal READ;





// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal programa;



non terminal starting;
non terminal bloque_declaraciones;
non terminal declaraciones;
non terminal bloque;
non terminal lista_de_variables;
non terminal tipodato;
non terminal ciclo;
non terminal si;
non terminal condicion_mul;
non terminal condicion;
non terminal funcion;





// Start Symbol Definition
start with starting;
starting ::= INIT LLAVEABRE bloque_declaraciones LLAVECIERRA  {: System.out.println("starting -> INIT { bloque_declaraciones } "); :}
             | INIT LLAVEABRE bloque_declaraciones LLAVECIERRA bloque {: System.out.println("starting -> INIT { bloque_declaraciones } bloque"); :}
             | bloque {: System.out.println("starting -> bloque"); :};

bloque_declaraciones ::= declaraciones {: System.out.println("bloq_decla -> decla"); :} |
                         bloque_declaraciones declaraciones {: System.out.println("bloq_decla -> bloq_decla decla"); :};
declaraciones::= lista_de_variables TWOPOINTS tipodato  {: System.out.println("declar ---> lista_de_variables TWOPOINTS tipodato "); :};

lista_de_variables::= IDENTIFIER  {: System.out.println("lista_de_variables -> ID"); :} |
                      lista_de_variables COMA IDENTIFIER  {: System.out.println("list var -> list var , ID"); :};

tipodato ::= CHAR|INT|FLOAT|STRING {: System.out.println("Tipo de dato -> C|I|F|S"); :};

bloque ::= sentence {: System.out.println("\tbloque ---> sentencia "); :}
                     |bloque sentence {: System.out.println("\t\tbloque ---> bloque sentencia"); :};
sentence ::= assignment  {: System.out.println("End Assignment"); :}
           | ciclo {: System.out.println("sentence -> ciclo"); :}
           | si {: System.out.println("sentence -> if"); :}
           | funcion {: System.out.println("sentence -> funcion"); :};

ciclo ::=  CICLO OPEN_BRACKET condicion_mul CLOSE_BRACKET LLAVEABRE bloque LLAVECIERRA
            {: System.out.println("Ciclo -> CICLO ( condicion_mul ) { bloque } "); :};

si ::= IF OPEN_BRACKET condicion_mul CLOSE_BRACKET LLAVEABRE bloque LLAVECIERRA {: System.out.println("if sin else "); :}
        | IF OPEN_BRACKET condicion_mul CLOSE_BRACKET LLAVEABRE bloque LLAVECIERRA ELSE LLAVEABRE bloque LLAVECIERRA
        {: System.out.println(" if con else"); :};

condicion_mul ::= condicion AND condicion {: System.out.println("condic_mul ---> condicion AND condicion "); :}
                                 | condicion OR condicion {: System.out.println("condicion_mul ---> condicion OR condicion "); :}
                                 | NOT condicion {: System.out.println("condicion_mul ---> NOT condicion "); :}
                                 | condicion {: System.out.println("condicion_mul ---> condicion "); :};

condicion ::= expression MAYOR expression {: System.out.println("condicion ---> expresion MAYOR expresion "); :}
          |expression MENOR expression {: System.out.println("condicion ---> expresion MENOR expresion "); :}
          |expression MAYOR_IGUAL expression {: System.out.println("condicion ---> expresion MAYOR_IGUAL expresion "); :}
          |expression MENOR_IGUAL expression {: System.out.println("condicion ---> expresion MENOR_IGUAL expresion "); :}
          |expression IGUAL expression {: System.out.println("condicion ---> expresion IGUAL expresion "); :}
          |expression DISTINTO expression {: System.out.println("expresion DISTINTO expresion"); :};

funcion ::= WRITE OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("funcion WRITE"); :}
            | READ OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("funcion READ"); :};

assignment ::= IDENTIFIER  ASSIG expression {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant Integer: " + constant ); :};
factor ::= SUB INTEGER_CONSTANT:constant {: System.out.println("Constant Integer: " + constant ); :};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Constant Float: " + constant ); :};
factor ::= CTE_CADENA:constant {: System.out.println("Constant String: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
